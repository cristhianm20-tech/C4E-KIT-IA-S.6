plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'org.owasp.dependencycheck' version '9.0.7'
    id 'me.champeau.jmh' version '0.7.2'
}

group = 'com.proyecto'
version = '0.0.1-SNAPSHOT'

// ================================================================================================
// JAVA 17 CONFIGURATION
// ================================================================================================
java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// ================================================================================================
// REPOSITORIES
// ================================================================================================
repositories {
    mavenCentral()
    gradlePluginPortal()
}

// ================================================================================================
// DEPENDENCY MANAGEMENT
// ================================================================================================
dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.2.0"
        mavenBom "org.junit:junit-bom:5.10.1"
    }
}

// ================================================================================================
// DEPENDENCIES
// ================================================================================================
dependencies {
    // Spring Boot Starters - Updated to 3.2.x
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // Database
    runtimeOnly 'com.h2database:h2:2.2.224'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Performance Testing - JMH
    jmhImplementation 'org.openjdk.jmh:jmh-core:1.37'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
    
    // Testing - Migrated to JUnit 5
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

project.tasks['sonarqube'].dependsOn 'jacocoTestReport'

// ================================================================================================
// SONARQUBE CONFIGURATION
// ================================================================================================
sonarqube {
    properties {
        property "sonar.projectKey", "spring-boot-migration"
        property "sonar.projectName", "Spring Boot Migration Project"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.coverage.exclusions", [
            "**/config/**",
            "**/dto/**",
            "**/entity/**",
            "**/*Application*",
            "**/*Config*"
        ].join(",")
    }
}

// ================================================================================================
// JACOCO CONFIGURATION
// ================================================================================================
jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/config/**',
                '**/dto/**',
                '**/entity/**',
                '**/*Application*',
                '**/*Config*'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
            excludes = [
                '**/config/**',
                '**/dto/**',
                '**/entity/**',
                '**/*Application*',
                '**/*Config*'
            ]
        }
    }
}

// ================================================================================================
// JMH CONFIGURATION
// ================================================================================================
jmh {
    iterations = 5
    benchmarkMode = ['all']
    batchSize = 1
    fork = 2
    warmupIterations = 3
}

// ================================================================================================
// CUSTOM TASKS
// ================================================================================================

task qualityCheck {
    dependsOn test, jacocoTestReport, jacocoTestCoverageVerification
    group = 'verification'
    description = 'Run all quality checks'
}

build.dependsOn qualityCheck

// ================================================================================================
// TESTING CONFIGURATION
// ================================================================================================
test {
    useJUnitPlatform()
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
    
    finalizedBy jacocoTestReport
}